// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: mathpb/math.proto

package mathpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathClient is the client API for Math service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeFactors(ctx context.Context, in *PrimeFactorsRequest, opts ...grpc.CallOption) (Math_PrimeFactorsClient, error)
	// Average is client-side streaming RPC
	Average(ctx context.Context, opts ...grpc.CallOption) (Math_AverageClient, error)
}

type mathClient struct {
	cc grpc.ClientConnInterface
}

func NewMathClient(cc grpc.ClientConnInterface) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/math.Math/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) PrimeFactors(ctx context.Context, in *PrimeFactorsRequest, opts ...grpc.CallOption) (Math_PrimeFactorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Math_ServiceDesc.Streams[0], "/math.Math/PrimeFactors", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathPrimeFactorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Math_PrimeFactorsClient interface {
	Recv() (*PrimeFactorsResponse, error)
	grpc.ClientStream
}

type mathPrimeFactorsClient struct {
	grpc.ClientStream
}

func (x *mathPrimeFactorsClient) Recv() (*PrimeFactorsResponse, error) {
	m := new(PrimeFactorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mathClient) Average(ctx context.Context, opts ...grpc.CallOption) (Math_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Math_ServiceDesc.Streams[1], "/math.Math/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathAverageClient{stream}
	return x, nil
}

type Math_AverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type mathAverageClient struct {
	grpc.ClientStream
}

func (x *mathAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathServer is the server API for Math service.
// All implementations must embed UnimplementedMathServer
// for forward compatibility
type MathServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	PrimeFactors(*PrimeFactorsRequest, Math_PrimeFactorsServer) error
	// Average is client-side streaming RPC
	Average(Math_AverageServer) error
	mustEmbedUnimplementedMathServer()
}

// UnimplementedMathServer must be embedded to have forward compatible implementations.
type UnimplementedMathServer struct {
}

func (UnimplementedMathServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedMathServer) PrimeFactors(*PrimeFactorsRequest, Math_PrimeFactorsServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeFactors not implemented")
}
func (UnimplementedMathServer) Average(Math_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedMathServer) mustEmbedUnimplementedMathServer() {}

// UnsafeMathServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathServer will
// result in compilation errors.
type UnsafeMathServer interface {
	mustEmbedUnimplementedMathServer()
}

func RegisterMathServer(s grpc.ServiceRegistrar, srv MathServer) {
	s.RegisterService(&Math_ServiceDesc, srv)
}

func _Math_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.Math/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_PrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeFactorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MathServer).PrimeFactors(m, &mathPrimeFactorsServer{stream})
}

type Math_PrimeFactorsServer interface {
	Send(*PrimeFactorsResponse) error
	grpc.ServerStream
}

type mathPrimeFactorsServer struct {
	grpc.ServerStream
}

func (x *mathPrimeFactorsServer) Send(m *PrimeFactorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Math_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServer).Average(&mathAverageServer{stream})
}

type Math_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type mathAverageServer struct {
	grpc.ServerStream
}

func (x *mathAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Math_ServiceDesc is the grpc.ServiceDesc for Math service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Math_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "math.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _Math_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeFactors",
			Handler:       _Math_PrimeFactors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _Math_Average_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mathpb/math.proto",
}
